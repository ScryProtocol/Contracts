// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;

interface Morpheus {
    function getFeed(
        uint256 feedID
    )
        external
        view
        returns (
            uint256 value,
            uint256 decimals,
            uint256 timestamp,
            string memory valStr
        );

    function getFeeds(
        uint256[] memory feedIDs
    )
        external
        view
        returns (
            uint256[] memory value,
            uint256[] memory decimals,
            uint256[] memory timestamp,
            string[] memory APIendpoint,
            string[] memory APIpath,
            string[] memory valStr
        );

    function requestFeeds(
        string[] calldata APIendpoint,
        string[] calldata APIendpointPath,
        uint256[] calldata decimals,
        uint256[] calldata bounties
    ) external payable returns (uint256[] memory feeds);

    function supportFeeds(
        uint256[] calldata feedIds,
        uint256[] calldata values
    ) external payable;
}

contract Veryfi {
    Morpheus morpheus = Morpheus(0x0000000000071821e8033345A7Be174647bE0706);
    mapping(uint => mapping(address => mapping(address => uint256)))
        public userBalance;
    mapping(uint => mapping(address => mapping(address => uint256)))
        public userBalanceFeed;
    mapping(uint => string) public RPC;
    address public owner;
    uint public fee = 0.001 ether;

    constructor() payable {
        RPC[0] = "https://eth.llamarpc.com";
        RPC[1] = "https://eth.llamarpc.com";
        RPC[10] = "https://mainnet.optimism.io";
        RPC[8453] = "https://mainnet.base.org";
        RPC[42161] = "https://arb-mainnet-public.unifra.io";
        RPC[137] = "https://polygon.llamarpc.com";
        RPC[56] = "https://binance.llamarpc.com";
        owner = 0x9D31e30003f253563Ff108BC60B16Fdf2c93abb5;
    }

    function getMyBalance(address TOKEN, uint chainID) public payable {
        if (chainID == 0) {
            chainID = 1;
        }
        require(msg.value >= fee);

        string[] memory apiEndpoint = new string[](1);
        apiEndpoint[0] = "XCHAIN";

        // ABI encode the balanceOf function and the address
        bytes memory data = abi.encodeWithSignature(
            "balanceOf(address)",
            msg.sender
        );

        string[] memory apiEndpointPath = new string[](1);
        apiEndpointPath[0] = string.concat(
            "XDATA?RPC=",
            RPC[chainID],
            "&ADDRS=",
            bytesToHexString(addressToBytes(TOKEN)),
            "&DATA=",
            bytesToHexString(data),
            "&FLAG=0"
        );

        uint256[] memory decimals = new uint256[](1);
        decimals[0] = 0;

        uint256[] memory bounties = new uint256[](1);
        bounties[0] = msg.value;

        uint256[] memory feeds = morpheus.requestFeeds{value: msg.value}(
            apiEndpoint,
            apiEndpointPath,
            decimals,
            bounties
        );
        userBalanceFeed[chainID][msg.sender][TOKEN] = feeds[0]; // Storing the feed ID here, to be decoded in setMyBalance
    }

    function getBalance(
        address target,
        address TOKEN,
        uint chainID
    ) public payable {
        if (chainID == 0) {
            chainID = 1;
        }
        require(msg.value >= fee);
        string[] memory apiEndpoint = new string[](1);
        apiEndpoint[0] = "XCHAIN";

        // ABI encode the balanceOf function and the address
        bytes memory data = abi.encodeWithSignature(
            "balanceOf(address)",
            target
        );

        string[] memory apiEndpointPath = new string[](1);
        apiEndpointPath[0] = string.concat(
            "XDATA?RPC=",
            RPC[chainID],
            "&ADDRS=",
            bytesToHexString(addressToBytes(TOKEN)),
            "&DATA=",
            bytesToHexString(data),
            "&FLAG=0"
        );

        uint256[] memory decimals = new uint256[](1);
        decimals[0] = 0;

        uint256[] memory bounties = new uint256[](1);
        bounties[0] = msg.value; //

        uint256[] memory feeds = morpheus.requestFeeds{value: msg.value}(
            apiEndpoint,
            apiEndpointPath,
            decimals,
            bounties
        );
        userBalanceFeed[chainID][target][TOKEN] = feeds[0]; // Storing the feed ID here, to be decoded in setMyBalance
    }

    function addressToBytes(
        address _address
    ) public pure returns (bytes memory) {
        bytes20 addressBytes = bytes20(_address);
        return abi.encodePacked(bytes20(_address));
    }

    function bytesToHexString(
        bytes memory data
    ) public pure returns (string memory) {
        bytes memory alphabet = "0123456789abcdef";

        bytes memory str = new bytes(2 + data.length * 2);
        str[0] = "0";
        str[1] = "x";
        for (uint i = 0; i < data.length; i++) {
            str[2 + i * 2] = alphabet[uint(uint8(data[i] >> 4))];
            str[3 + i * 2] = alphabet[uint(uint8(data[i] & 0x0f))];
        }
        return string(str);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }

    function changeOwner(address newOwner) public onlyOwner {
        require(newOwner != address(0), "New owner address cannot be zero");
        owner = newOwner;
    }

    function changeOracle(address newOracle) public onlyOwner {
        require(newOracle != address(0), "New address cannot be zero");
        Morpheus morpheus = Morpheus(newOracle);
    }

    function updateFee(uint newFee) public onlyOwner {
        fee = newFee;
    }

    function setRPCForChain(
        uint chainId,
        string memory newRPC
    ) public onlyOwner {
        RPC[chainId] = newRPC;
    }

    function withdrawFunds() public onlyOwner {
        payable(msg.sender).transfer(address(this).balance);
    }

    function setMyBalance(address token, uint chainID) public {
        if (chainID == 0) {
            chainID = 1;
        }
        (uint256 balance, uint256 timestamp, , ) = morpheus.getFeed(
            userBalanceFeed[chainID][msg.sender][token]
        );
        require(timestamp >= block.timestamp - 10000, "Data is too old");
        userBalance[chainID][msg.sender][token] = balance;
    }

    function setBalance(address target, address token, uint chainID) public {
        if (chainID == 0) {
            chainID = 1;
        }
        (uint256 balance, uint256 timestamp, , ) = morpheus.getFeed(
            userBalanceFeed[chainID][target][token]
        );
        require(timestamp >= block.timestamp - 10000, "Data is too old");
        userBalance[chainID][target][token] = balance;
    }
}
